@using PagedList.Mvc;
@using TblAdmin.Areas.Books.Controllers;
@using TblAdmin.Areas.Books.ViewModels.Books;
@using TblAdmin.Areas.Base.ViewModels;


@model TblAdmin.Areas.Books.ViewModels.Books.IndexViewModel

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Books";
}

<h2>Books</h2>
@using (Html.BeginForm("Index", "Books", FormMethod.Get))
{
    <div class="row">
        <div class="col-sm-3">
            <div class="input-group">
                @Html.TextBox("SearchString", Model.SearchSortPageParams.SearchString, new { @class = "form-control" })
                <span class="input-group-btn">
                    <button type="submit" class="btn btn-default"><span class="glyphicon glyphicon-search"></span></button>
                </span>
            </div>
        </div>
    </div>
}
<p></p>

<p>
    @Html.ActionLink("Create New", "Create", Model.CreateLinkRouteParams)
</p>

@helper SortGlyphicon(string sortOrder)
{
    if (sortOrder == SearchSortPageViewModel.SORT_ORDER_DESC)
    {
        <span class="glyphicon glyphicon-sort-by-alphabet-alt"></span>
    }
    else
    {
        <span class="glyphicon glyphicon-sort-by-alphabet"></span>
    }
}


    <table class="table">
        <tr>
            <th>
                @Html.ActionLink("Publisher", "Index", Model.PublisherRouteParams)
                @if (Model.SearchSortPageParams.SortCol == "publisher")
                {
                    @SortGlyphicon(Model.SearchSortPageParams.CurrentOrder)

                }
            </th>
            <th>
                @Html.ActionLink("Name", "Index", Model.NameRouteParams)
                @if (Model.SearchSortPageParams.SortCol == "name")
                {
                    @SortGlyphicon(Model.SearchSortPageParams.CurrentOrder)

                }
            </th>
            <th>
                @Html.ActionLink("CreatedDate", "Index", Model.CreatedDateRouteParams)
                @if (Model.SearchSortPageParams.SortCol == "createdDate")
                {
                    @SortGlyphicon(Model.SearchSortPageParams.CurrentOrder)

                }
            </th>
            <th>
                @Html.ActionLink("ModifiedDate", "Index", Model.ModifiedDateRouteParams)
                @if (Model.SearchSortPageParams.SortCol == "modifiedDate")
                {
                    @SortGlyphicon(Model.SearchSortPageParams.CurrentOrder)

                }
            </th>
            <th></th>
        </tr>



        @foreach (var item in Model.Books) {

    RouteValueDictionary rvd = new RouteValueDictionary {
                    {"SearchSortPageParams.SearchString", Model.SearchSortPageParams.SearchString },
                    {"SearchSortPageParams.SortCol", Model.SearchSortPageParams.SortCol },
                    {"SearchSortPageParams.SortColOrder", Model.SearchSortPageParams.NextOrder },
                    {"SearchSortPageParams.Page", Model.SearchSortPageParams.Page },
                    {"SearchSortPageParams.PageSize", Model.SearchSortPageParams.PageSize },
                    {"Id", item.ID },
                };

            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Publisher.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ModifiedDate)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", rvd) |
                    @Html.ActionLink("Details", "Details", rvd) |
                    @Html.ActionLink("Delete", "Delete", rvd)

                </td>
            </tr>
}

    </table>
<p>
    
    Page @( (Model.Books.PageNumber > Model.Books.PageCount) ? 0 : Model.Books.PageNumber) of @Model.Books.PageCount
    
    @Html.PagedListPager(
        Model.Books,
        page => Url.Action(
            "Index",
            new { Model.SearchSortPageParams.SearchString,
                  Model.SearchSortPageParams.SortCol,
                  Model.SearchSortPageParams.CurrentOrder,
                  Model.SearchSortPageParams.NextOrder,
                  page }
    ))
</p>

