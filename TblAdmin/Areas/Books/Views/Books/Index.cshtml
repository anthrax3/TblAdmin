@using PagedList.Mvc;
@using TblAdmin.Areas.Books.Controllers;
@using TblAdmin.Areas.Books.ViewModels.Books;

@model TblAdmin.Areas.Books.ViewModels.Books.IndexViewModel

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Books";
}

<h2>Books</h2>
@using (Html.BeginForm("Index", "Books", FormMethod.Get))
{
    <div class="row">
        <div class="col-sm-3">
            <div class="input-group">
                @Html.TextBox("SearchString", Model.SearchSortPageParams.SearchString, new { @class = "form-control" })
                <span class="input-group-btn">
                    <button type="submit" class="btn btn-default"><span class="glyphicon glyphicon-search"></span></button>
                </span>
            </div>
        </div>
    </div>
}
<p></p>
<p>
    @Html.ActionLink("Create New", "Create")
</p>

@helper SortGlyphicon(string sortOrder)
{ 
    if (sortOrder == "asc")
    {
        <span class="glyphicon glyphicon-sort-by-alphabet-alt"></span>
    }
    else
    {
        <span class="glyphicon glyphicon-sort-by-alphabet"></span>
    }
}


<table class="table">
    <tr>
        <th>
            @if (Model.SearchSortPageParams.SortCol == "publisher")
            {
                @Html.ActionLink("Publisher", "Index", Model.SearchSortPageParams)
                @SortGlyphicon(Model.SearchSortPageParams.SortOrder)
            }
            else
            {
                @Html.ActionLink("Publisher", "Index", new { Model.SearchSortPageParams.SearchString, SortCol = "publisher"}) 
            }
        </th>
        <th>
            @if (Model.SearchSortPageParams.SortCol == "name")
            {
                @Html.ActionLink("Name", "Index", Model.SearchSortPageParams)
                @SortGlyphicon(Model.SearchSortPageParams.SortOrder);
            }
            else
            {
                 @Html.ActionLink("Name", "Index", new { Model.SearchSortPageParams.SearchString, SortCol = "name"})
            }
        </th>
        <th>
            @if (Model.SearchSortPageParams.SortCol == "createdDate")
            {
                @Html.ActionLink("Created", "Index", Model.SearchSortPageParams)
                @SortGlyphicon(Model.SearchSortPageParams.SortOrder);
            }
            else
            {
                @Html.ActionLink("Created", "Index", new { Model.SearchSortPageParams.SearchString, SortCol = "createdDate" })
            
            }
        </th>
        <th>
            @if (ViewBag.SortCol == "modifiedDate")
            {
                @Html.ActionLink("Modified", "Index", Model.SearchSortPageParams)
                @SortGlyphicon(Model.SearchSortPageParams.SortOrder);
            }
            else
            {
                @Html.ActionLink("Modified", "Index", new { Model.SearchSortPageParams.SearchString, SortCol = "modifiedDate" })
                
            }
        </th>
        <th></th>
    </tr>

    @*KLUDGE - Paging and Edit/Delete/Details need the current sort order, not the next sort order which the controller provides for the colums, so toggle it back.*@
    @if (Model.SearchSortPageParams.SortOrder == "asc")
    {
        Model.SearchSortPageParams.SortOrder = "desc";
    }
    else
    {
        Model.SearchSortPageParams.SortOrder = "asc";
    }

@foreach (var item in Model.Books) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Publisher.Name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.CreatedDate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ModifiedDate)
        </td>
        <td>
            @{EditViewModel evm = new EditViewModel(Model.SearchSortPageParams, item.ID);}
            @{string theQueryString = "?SearchSortPageParams.SearchString=" + @evm.SearchSortPageParams.SearchString + "&SearchSortPageParams.SortCol=" + @evm.SearchSortPageParams.SortCol + "&SearchSortPageParams.SortOrder=" + @evm.SearchSortPageParams.SortOrder + "&SearchSortPageParams.Page=" + @evm.SearchSortPageParams.Page + "&SearchSortPageParams.PageSize=" + @evm.SearchSortPageParams.PageSize;}
            
            <a href="@Url.Action("Edit", new { evm.Id })@(theQueryString)">Edit</a> |
            <a href="@Url.Action("Details", new { evm.Id })@(theQueryString)">Details</a> |
            <a href="@Url.Action("Delete", new { evm.Id })@(theQueryString)">Delete</a>
            
        </td>
    </tr>
}

</table>
<p>
    
    Page @(Model.Books.PageCount < Model.Books.PageNumber ? 0 : Model.Books.PageNumber) of @Model.Books.PageCount
    
    @Html.PagedListPager(
        Model.Books,
        page => Url.Action(
            "Index",
                    new { Model.SearchSortPageParams.SearchString, Model.SearchSortPageParams.SortCol, Model.SearchSortPageParams.SortOrder, page }
    ))
</p>

